syntax = "proto3";

package bman;

// The direction the player is facing
enum Direction {
  DIR_LEFT = 0;
  DIR_RIGHT = 1;
  DIR_UP = 2;
  DIR_DOWN = 3;
}

// Type of pwoerup
enum Powerup {
  PUP_NONE = 0;
  PUP_FLAME = 1;
  PUP_EXTRA_BOMB = 2;
  PUP_KICK = 3;
  PUP_SPEED = 4;
  PUP_PUNCH = 5;
  PUP_DEATH = 6;
  PUP_DETONATOR = 7;
}

// State that fully encompases a player
message PlayerState {
  // The position (x, y) is of higher fidelity than used for rendering,
  optional int32 x = 1;
  optional int32 y = 2;
  optional Direction dir = 3;
  optional int32 anim_counter = 4;
  optional int32 num_bombs = 5;
  optional int32 num_used_bombs = 9;
  optional int32 strength = 6;
  optional bool has_detonator = 7;
  optional int32 health = 8;
  enum State {
    STATE_ALIVE = 0;
    STATE_DYING = 1;
    STATE_SPAWNING = 2;
  }
  optional State state = 10;
}

// The state of the level
message LevelState {
  // Each brick has a position (grid point) and may be hiding
  // a powerup. It is solid until it is destroyed, after which
  // the powerup is revealed.
  message Brick {
    optional int32 x = 1;
    optional int32 y = 2;
    optional bool solid = 3;
    optional Powerup powerup = 4;
  }
  repeated Brick bricks = 1;

  // Each bomb has a position (grid point) and strength (flame length)
  // and is associated with a player.
  message Bomb {
    optional int32 x = 1;
    optional int32 y = 2;
    optional int32 strength = 3;
    optional int32 player_id = 4;
    optional int32 timer = 5;
  }
  repeated Bomb bombs = 2;

  // Explosion (or flame) is used to denote which part of the game is
  // lit up with fire (e.g., a position)
  message Explosion {
    message Point {
      optional int32 x = 1;
      optional int32 y = 2;
      optional bool bomb_center = 3;
    }
    repeated Point points = 1;
    optional int32 timer = 2;
    optional int32 player_id = 3;
  }
  repeated Explosion explosions = 3;
}

// The GameState message fully encompasses all state of an ongoing game.
message GameState {
  repeated int32 score = 1;

  optional int32 clock = 2;

  repeated PlayerState players = 3;

  optional LevelState level = 4;
}

// Static configuration of the level and game (used to init players).
message GameConfig {
  message PlayerConfig {
    optional int32 num_bombs = 1;
    optional int32 strength = 2;
    optional int32 max_players = 3;
    optional int32 health = 4;
  }
  optional int32 level_width = 1;
  optional int32 level_height = 2;
  optional LevelState level_state = 3;
  optional PlayerConfig player_config = 4;
}

// A client connects to the game with a JoinRequest
message JoinRequest {
  optional string game_id = 1;
  optional string user_name = 2;
}

message JoinResponse {
  optional string status_message = 1;
  optional GameConfig game_config = 2;
  optional int32 player_index = 3;
}

// Each client is expected to send a MovePlayerRequest at the
// framerate of the game.
message MovePlayerRequest {
  optional string game_id = 1;
  optional int32 player_index = 2;
  optional PlayerState previous_state = 3;
  optional int32 client_clock = 5; // client-side timing
  
  message Action {
    optional int32 clock = 1;
    optional int32 dx = 2;
    optional int32 dy = 3;
    optional Direction dir = 4;
    optional bool place_bomb = 5;
  }

  repeated Action actions = 4;
}

message MovePlayerResponse {
  optional GameState game_state = 1;
  optional int32 client_clock = 2;
}

// A backend service that hosts games.
service BManService {
  rpc Join (JoinRequest) returns (JoinResponse) {}
  rpc MovePlayer(MovePlayerRequest) returns (MovePlayerResponse) {}

  rpc StreamingMovePlayer(stream MovePlayerRequest) returns (stream MovePlayerResponse) {}
}
